import nltk
import pandas as pd
from .models import sent_predictions as sent_predictions
from .utils import get_concreteness_df as get_concreteness_df, get_freq_df as get_freq_df, get_imageability_df as get_imageability_df, mean as mean, slope_coefficient as slope_coefficient
from _typeshed import Incomplete
from typing import Any, Callable, Generator, NamedTuple, Optional, Tuple

TAG_TO_WN: Incomplete
TAGS_OF_INTEREST: Incomplete


class BookReport(NamedTuple):
    title: str
    nwords: Optional[int]
    mean_wl: Optional[float]
    mean_sl: Optional[float]
    mean_tokenspersent: Optional[float]
    prop_contentwords: Optional[float]
    mean_conc: Optional[float]
    mean_img: Optional[float]
    mean_freq: Optional[float]
    prop_pos: Optional[dict]


class CreativityBenchmark:
    plots_folder: str
    tags: Incomplete
    tags_of_interest: Incomplete
    tag_to_embed: Incomplete
    embed_to_tag: Incomplete
    raw_text: Incomplete
    words: Incomplete
    sents: Incomplete
    tokenized_sents: Incomplete
    tagset: Incomplete
    tagged_sents: Incomplete
    postag_counts: Incomplete
    title: Incomplete
    def __init__(self, raw_text: str, title: str = 'unknown',
                 tagset: str = 'universal') -> None: ...

    def ngrams(self, n, **kwargs): ...
    def sent_postag_counts(self, tagset: str = ...) -> list[nltk.FreqDist]: ...
    def tagged_words(self): ...
    def book_postag_counts(
        self, tagset: Optional[str] = ...) -> nltk.FreqDist: ...

    def num_tokens_per_sentence(self) -> Generator[int, None, None]: ...
    def total_tokens_per_sentence(self) -> int: ...
    def avg_tokens_per_sentence(self) -> float: ...
    def postag_graph(self): ...
    def plot_postag_distribution(self, fig: Incomplete | None = ...,
                                 ax: Incomplete | None = ..., **kwargs) -> Tuple[Any, Any]: ...

    def plot_transition_matrix(self) -> None: ...
    def avg_word_length(self): ...
    def avg_sentence_length(self): ...
    def content_words(self): ...
    def content_word_sentlevel(self): ...
    def ncontent_word_sentlevel(self): ...

    @staticmethod
    def concreteness(
        data: str | list[str], concreteness_df: pd.DataFrame) -> float | None | list[float | None]: ...
    def calculate_sent_slopes(self, model, tokenizer,
                              n) -> list[list[float]]: ...

    @property
    def model(self): ...
    @property
    def word2vec_model(self): ...
    def calculate_sim_scores(self, model, tokenizer,
                             sim_function: Callable, max_sents: int = ...): ...

    def sent_lemmas(self) -> list[list[str]]: ...
    def lemmas(self) -> list[str]: ...

    def frequency_ratings(
        self, lemmas: Optional[list[str]] = ...) -> list[Optional[float]]: ...

    def report(self, print_time=True, postag_distribution=True, heavyweight_metrics=False, n = 1000, model = None, tokenizer = None, k = 10, word2vec_model=None) -> BookReport: ...
