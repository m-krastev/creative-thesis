import numpy.typing as ntp
import pandas as pd
from typing import Any, Literal, Optional, Sequence, overload

stopwords: set[str]

def mean(items: Sequence) -> float: ...
def cross_softmax(one: ntp.NDArray, two: ntp.NDArray,
                  temp1: float = ..., temp2: float = ...): ...


def slope_coefficient(one: ntp.NDArray, two: ntp.NDArray) -> float: ...
@overload
def get_concreteness_df(_format: Literal['df'] = 'df') -> pd.DataFrame: ...
@overload
def get_concreteness_df(_format: Literal['dict']) -> dict[str, float]: ...

@overload
def get_imageability_df(_format: Literal['df'] = "df") -> pd.DataFrame: ...
@overload
def get_imageability_df(_format: Literal['dict']) -> dict: ...

@overload
def imageability(data: str, imageability_df: pd.DataFrame) -> Optional[float]: ...
@overload
def imageability(data: list[str], imageability_df: pd.DataFrame) -> list[Optional[float]]: ...


@overload
def _ratings(data: str, func: dict) -> float | None: ...
    
@overload
def _ratings(data: list[str], func: dict) -> list[float | None]: ...

@overload
def get_freq_df(_format: Literal["df"]) -> pd.DataFrame: ...
@overload
def get_freq_df(_format: Literal["dict"]) -> dict[str, float]: ...

@overload
def get_freq_df(_format: str) -> Any: ...


@overload
def concreteness(data: str, func: dict) -> float | None: ...
    
@overload
def concreteness(data: list[str], func: dict) -> list[float | None]: ...

