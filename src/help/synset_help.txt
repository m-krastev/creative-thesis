Help on Synset in module nltk.corpus.reader.wordnet object:

class Synset(_WordNetObject)
 |  Synset(wordnet_corpus_reader)
 |  
 |  Create a Synset from a "<lemma>.<pos>.<number>" string where:
 |  <lemma> is the word's morphological stem
 |  <pos> is one of the module attributes ADJ, ADJ_SAT, ADV, NOUN or VERB
 |  <number> is the sense number, counting from 0.
 |  
 |  Synset attributes, accessible via methods with the same name:
 |  
 |  - name: The canonical name of this synset, formed using the first lemma
 |    of this synset. Note that this may be different from the name
 |    passed to the constructor if that string used a different lemma to
 |    identify the synset.
 |  - pos: The synset's part of speech, matching one of the module level
 |    attributes ADJ, ADJ_SAT, ADV, NOUN or VERB.
 |  - lemmas: A list of the Lemma objects for this synset.
 |  - definition: The definition for this synset.
 |  - examples: A list of example strings for this synset.
 |  - offset: The offset in the WordNet dict file of this synset.
 |  - lexname: The name of the lexicographer file containing this synset.
 |  
 |  Synset methods:
 |  
 |  Synsets have the following methods for retrieving related Synsets.
 |  They correspond to the names for the pointer symbols defined here:
 |  https://wordnet.princeton.edu/documentation/wninput5wn
 |  These methods all return lists of Synsets.
 |  
 |  - hypernyms, instance_hypernyms
 |  - hyponyms, instance_hyponyms
 |  - member_holonyms, substance_holonyms, part_holonyms
 |  - member_meronyms, substance_meronyms, part_meronyms
 |  - attributes
 |  - entailments
 |  - causes
 |  - also_sees
 |  - verb_groups
 |  - similar_tos
 |  
 |  Additionally, Synsets support the following methods specific to the
 |  hypernym relation:
 |  
 |  - root_hypernyms
 |  - common_hypernyms
 |  - lowest_common_hypernyms
 |  
 |  Note that Synsets do not support the following relations because
 |  these are defined by WordNet as lexical relations:
 |  
 |  - antonyms
 |  - derivationally_related_forms
 |  - pertainyms
 |  
 |  Method resolution order:
 |      Synset
 |      _WordNetObject
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, wordnet_corpus_reader)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  acyclic_tree = acyclic_depth_first(tree, children=<built-in function iter>, depth=-1, cut_mark=None, traversed=None)
 |      Traverse the nodes of a tree in depth-first order,
 |      discarding eventual cycles within any branch,
 |      adding cut_mark (when specified) if cycles were truncated.
 |      
 |      The first argument should be the tree root;
 |      children should be a function taking as argument a tree node
 |      and returning an iterator of the node's children.
 |      
 |      Catches all cycles:
 |      
 |      >>> import nltk
 |      >>> from nltk.util import acyclic_depth_first as acyclic_tree
 |      >>> wn=nltk.corpus.wordnet
 |      >>> from pprint import pprint
 |      >>> pprint(acyclic_tree(wn.synset('dog.n.01'), lambda s:s.hypernyms(),cut_mark='...'))
 |      [Synset('dog.n.01'),
 |       [Synset('canine.n.02'),
 |        [Synset('carnivore.n.01'),
 |         [Synset('placental.n.01'),
 |          [Synset('mammal.n.01'),
 |           [Synset('vertebrate.n.01'),
 |            [Synset('chordate.n.01'),
 |             [Synset('animal.n.01'),
 |              [Synset('organism.n.01'),
 |               [Synset('living_thing.n.01'),
 |                [Synset('whole.n.02'),
 |                 [Synset('object.n.01'),
 |                  [Synset('physical_entity.n.01'),
 |                   [Synset('entity.n.01')]]]]]]]]]]]]],
 |       [Synset('domestic_animal.n.01'), "Cycle(Synset('animal.n.01'),-3,...)"]]
 |  
 |  closure(self, rel, depth=-1)
 |      Return the transitive closure of source under the rel
 |      relationship, breadth-first, discarding cycles:
 |      
 |      >>> from nltk.corpus import wordnet as wn
 |      >>> computer = wn.synset('computer.n.01')
 |      >>> topic = lambda s:s.topic_domains()
 |      >>> print(list(computer.closure(topic)))
 |      [Synset('computer_science.n.01')]
 |      
 |      UserWarning: Discarded redundant search for Synset('computer.n.01') at depth 2
 |      
 |      
 |      Include redundant paths (but only once), avoiding duplicate searches
 |      (from 'animal.n.01' to 'entity.n.01'):
 |      
 |      >>> dog = wn.synset('dog.n.01')
 |      >>> hyp = lambda s:s.hypernyms()
 |      >>> print(list(dog.closure(hyp)))
 |      [Synset('canine.n.02'), Synset('domestic_animal.n.01'), Synset('carnivore.n.01'),
 |      Synset('animal.n.01'), Synset('placental.n.01'), Synset('organism.n.01'),
 |      Synset('mammal.n.01'), Synset('living_thing.n.01'), Synset('vertebrate.n.01'),
 |      Synset('whole.n.02'), Synset('chordate.n.01'), Synset('object.n.01'),
 |      Synset('physical_entity.n.01'), Synset('entity.n.01')]
 |      
 |      UserWarning: Discarded redundant search for Synset('animal.n.01') at depth 7
 |  
 |  common_hypernyms(self, other)
 |      Find all synsets that are hypernyms of this synset and the
 |      other synset.
 |      
 |      :type other: Synset
 |      :param other: other input synset.
 |      :return: The synsets that are hypernyms of both synsets.
 |  
 |  definition(self, lang='eng')
 |      Return definition in specified language
 |  
 |  examples(self, lang='eng')
 |      Return examples in specified language
 |  
 |  frame_ids(self)
 |  
 |  hypernym_distances(self, distance=0, simulate_root=False)
 |      Get the path(s) from this synset to the root, counting the distance
 |      of each node from the initial node on the way. A set of
 |      (synset, distance) tuples is returned.
 |      
 |      :type distance: int
 |      :param distance: the distance (number of edges) from this hypernym to
 |          the original hypernym ``Synset`` on which this method was called.
 |      :return: A set of ``(Synset, int)`` tuples where each ``Synset`` is
 |         a hypernym of the first ``Synset``.
 |  
 |  hypernym_paths(self)
 |      Get the path(s) from this synset to the root, where each path is a
 |      list of the synset nodes traversed on the way to the root.
 |      
 |      :return: A list of lists, where each list gives the node sequence
 |         connecting the initial ``Synset`` node and a root node.
 |  
 |  jcn_similarity(self, other, ic, verbose=False)
 |      Jiang-Conrath Similarity:
 |      Return a score denoting how similar two word senses are, based on the
 |      Information Content (IC) of the Least Common Subsumer (most specific
 |      ancestor node) and that of the two input Synsets. The relationship is
 |      given by the equation 1 / (IC(s1) + IC(s2) - 2 * IC(lcs)).
 |      
 |      :type  other: Synset
 |      :param other: The ``Synset`` that this ``Synset`` is being compared to.
 |      :type  ic: dict
 |      :param ic: an information content object (as returned by
 |          ``nltk.corpus.wordnet_ic.ic()``).
 |      :return: A float score denoting the similarity of the two ``Synset``
 |          objects.
 |  
 |  lch_similarity(self, other, verbose=False, simulate_root=True)
 |      Leacock Chodorow Similarity:
 |      Return a score denoting how similar two word senses are, based on the
 |      shortest path that connects the senses (as above) and the maximum depth
 |      of the taxonomy in which the senses occur. The relationship is given as
 |      -log(p/2d) where p is the shortest path length and d is the taxonomy
 |      depth.
 |      
 |      :type  other: Synset
 |      :param other: The ``Synset`` that this ``Synset`` is being compared to.
 |      :type simulate_root: bool
 |      :param simulate_root: The various verb taxonomies do not
 |          share a single root which disallows this metric from working for
 |          synsets that are not connected. This flag (True by default)
 |          creates a fake root that connects all the taxonomies. Set it
 |          to false to disable this behavior. For the noun taxonomy,
 |          there is usually a default root except for WordNet version 1.6.
 |          If you are using wordnet 1.6, a fake root will be added for nouns
 |          as well.
 |      :return: A score denoting the similarity of the two ``Synset`` objects,
 |          normally greater than 0. None is returned if no connecting path
 |          could be found. If a ``Synset`` is compared with itself, the
 |          maximum score is returned, which varies depending on the taxonomy
 |          depth.
 |  
 |  lemma_names(self, lang='eng')
 |      Return all the lemma_names associated with the synset
 |  
 |  lemmas(self, lang='eng')
 |      Return all the lemma objects associated with the synset
 |  
 |  lexname(self)
 |  
 |  lin_similarity(self, other, ic, verbose=False)
 |      Lin Similarity:
 |      Return a score denoting how similar two word senses are, based on the
 |      Information Content (IC) of the Least Common Subsumer (most specific
 |      ancestor node) and that of the two input Synsets. The relationship is
 |      given by the equation 2 * IC(lcs) / (IC(s1) + IC(s2)).
 |      
 |      :type other: Synset
 |      :param other: The ``Synset`` that this ``Synset`` is being compared to.
 |      :type ic: dict
 |      :param ic: an information content object (as returned by
 |          ``nltk.corpus.wordnet_ic.ic()``).
 |      :return: A float score denoting the similarity of the two ``Synset``
 |          objects, in the range 0 to 1.
 |  
 |  lowest_common_hypernyms(self, other, simulate_root=False, use_min_depth=False)
 |      Get a list of lowest synset(s) that both synsets have as a hypernym.
 |      When `use_min_depth == False` this means that the synset which appears
 |      as a hypernym of both `self` and `other` with the lowest maximum depth
 |      is returned or if there are multiple such synsets at the same depth
 |      they are all returned
 |      
 |      However, if `use_min_depth == True` then the synset(s) which has/have
 |      the lowest minimum depth and appear(s) in both paths is/are returned.
 |      
 |      By setting the use_min_depth flag to True, the behavior of NLTK2 can be
 |      preserved. This was changed in NLTK3 to give more accurate results in a
 |      small set of cases, generally with synsets concerning people. (eg:
 |      'chef.n.01', 'fireman.n.01', etc.)
 |      
 |      This method is an implementation of Ted Pedersen's "Lowest Common
 |      Subsumer" method from the Perl Wordnet module. It can return either
 |      "self" or "other" if they are a hypernym of the other.
 |      
 |      :type other: Synset
 |      :param other: other input synset
 |      :type simulate_root: bool
 |      :param simulate_root: The various verb taxonomies do not
 |          share a single root which disallows this metric from working for
 |          synsets that are not connected. This flag (False by default)
 |          creates a fake root that connects all the taxonomies. Set it
 |          to True to enable this behavior. For the noun taxonomy,
 |          there is usually a default root except for WordNet version 1.6.
 |          If you are using wordnet 1.6, a fake root will need to be added
 |          for nouns as well.
 |      :type use_min_depth: bool
 |      :param use_min_depth: This setting mimics older (v2) behavior of NLTK
 |          wordnet If True, will use the min_depth function to calculate the
 |          lowest common hypernyms. This is known to give strange results for
 |          some synset pairs (eg: 'chef.n.01', 'fireman.n.01') but is retained
 |          for backwards compatibility
 |      :return: The synsets that are the lowest common hypernyms of both
 |          synsets
 |  
 |  max_depth(self)
 |      :return: The length of the longest hypernym path from this
 |          synset to the root.
 |  
 |  min_depth(self)
 |      :return: The length of the shortest hypernym path from this
 |          synset to the root.
 |  
 |  mst = unweighted_minimum_spanning_tree(tree, children=<built-in function iter>)
 |      Output a Minimum Spanning Tree (MST) of an unweighted graph,
 |      by traversing the nodes of a tree in breadth-first order,
 |      discarding eventual cycles.
 |      
 |      The first argument should be the tree root;
 |      children should be a function taking as argument a tree node
 |      and returning an iterator of the node's children.
 |      
 |      >>> import nltk
 |      >>> from nltk.util import unweighted_minimum_spanning_tree as mst
 |      >>> wn=nltk.corpus.wordnet
 |      >>> from pprint import pprint
 |      >>> pprint(mst(wn.synset('bound.a.01'), lambda s:s.also_sees()))
 |      [Synset('bound.a.01'),
 |       [Synset('unfree.a.02'),
 |        [Synset('confined.a.02')],
 |        [Synset('dependent.a.01')],
 |        [Synset('restricted.a.01'), [Synset('classified.a.02')]]]]
 |  
 |  name(self)
 |  
 |  offset(self)
 |  
 |  path_similarity(self, other, verbose=False, simulate_root=True)
 |      Path Distance Similarity:
 |      Return a score denoting how similar two word senses are, based on the
 |      shortest path that connects the senses in the is-a (hypernym/hypnoym)
 |      taxonomy. The score is in the range 0 to 1, except in those cases where
 |      a path cannot be found (will only be true for verbs as there are many
 |      distinct verb taxonomies), in which case None is returned. A score of
 |      1 represents identity i.e. comparing a sense with itself will return 1.
 |      
 |      :type other: Synset
 |      :param other: The ``Synset`` that this ``Synset`` is being compared to.
 |      :type simulate_root: bool
 |      :param simulate_root: The various verb taxonomies do not
 |          share a single root which disallows this metric from working for
 |          synsets that are not connected. This flag (True by default)
 |          creates a fake root that connects all the taxonomies. Set it
 |          to false to disable this behavior. For the noun taxonomy,
 |          there is usually a default root except for WordNet version 1.6.
 |          If you are using wordnet 1.6, a fake root will be added for nouns
 |          as well.
 |      :return: A score denoting the similarity of the two ``Synset`` objects,
 |          normally between 0 and 1. None is returned if no connecting path
 |          could be found. 1 is returned if a ``Synset`` is compared with
 |          itself.
 |  
 |  pos(self)
 |  
 |  res_similarity(self, other, ic, verbose=False)
 |      Resnik Similarity:
 |      Return a score denoting how similar two word senses are, based on the
 |      Information Content (IC) of the Least Common Subsumer (most specific
 |      ancestor node).
 |      
 |      :type  other: Synset
 |      :param other: The ``Synset`` that this ``Synset`` is being compared to.
 |      :type ic: dict
 |      :param ic: an information content object (as returned by
 |          ``nltk.corpus.wordnet_ic.ic()``).
 |      :return: A float score denoting the similarity of the two ``Synset``
 |          objects. Synsets whose LCS is the root node of the taxonomy will
 |          have a score of 0 (e.g. N['dog'][0] and N['table'][0]).
 |  
 |  root_hypernyms(self)
 |      Get the topmost hypernyms of this synset in WordNet.
 |  
 |  shortest_path_distance(self, other, simulate_root=False)
 |      Returns the distance of the shortest path linking the two synsets (if
 |      one exists). For each synset, all the ancestor nodes and their
 |      distances are recorded and compared. The ancestor node common to both
 |      synsets that can be reached with the minimum number of traversals is
 |      used. If no ancestor nodes are common, None is returned. If a node is
 |      compared with itself 0 is returned.
 |      
 |      :type other: Synset
 |      :param other: The Synset to which the shortest path will be found.
 |      :return: The number of edges in the shortest path connecting the two
 |          nodes, or None if no path exists.
 |  
 |  tree(self, rel, depth=-1, cut_mark=None)
 |      Return the full relation tree, including self,
 |      discarding cycles:
 |      
 |      >>> from nltk.corpus import wordnet as wn
 |      >>> from pprint import pprint
 |      >>> computer = wn.synset('computer.n.01')
 |      >>> topic = lambda s:s.topic_domains()
 |      >>> pprint(computer.tree(topic))
 |      [Synset('computer.n.01'), [Synset('computer_science.n.01')]]
 |      
 |      UserWarning: Discarded redundant search for Synset('computer.n.01') at depth -3
 |      
 |      
 |      But keep duplicate branches (from 'animal.n.01' to 'entity.n.01'):
 |      
 |      >>> dog = wn.synset('dog.n.01')
 |      >>> hyp = lambda s:s.hypernyms()
 |      >>> pprint(dog.tree(hyp))
 |      [Synset('dog.n.01'),
 |       [Synset('canine.n.02'),
 |        [Synset('carnivore.n.01'),
 |         [Synset('placental.n.01'),
 |          [Synset('mammal.n.01'),
 |           [Synset('vertebrate.n.01'),
 |            [Synset('chordate.n.01'),
 |             [Synset('animal.n.01'),
 |              [Synset('organism.n.01'),
 |               [Synset('living_thing.n.01'),
 |                [Synset('whole.n.02'),
 |                 [Synset('object.n.01'),
 |                  [Synset('physical_entity.n.01'),
 |                   [Synset('entity.n.01')]]]]]]]]]]]]],
 |       [Synset('domestic_animal.n.01'),
 |        [Synset('animal.n.01'),
 |         [Synset('organism.n.01'),
 |          [Synset('living_thing.n.01'),
 |           [Synset('whole.n.02'),
 |            [Synset('object.n.01'),
 |             [Synset('physical_entity.n.01'), [Synset('entity.n.01')]]]]]]]]]
 |  
 |  wup_similarity(self, other, verbose=False, simulate_root=True)
 |      Wu-Palmer Similarity:
 |      Return a score denoting how similar two word senses are, based on the
 |      depth of the two senses in the taxonomy and that of their Least Common
 |      Subsumer (most specific ancestor node). Previously, the scores computed
 |      by this implementation did _not_ always agree with those given by
 |      Pedersen's Perl implementation of WordNet Similarity. However, with
 |      the addition of the simulate_root flag (see below), the score for
 |      verbs now almost always agree but not always for nouns.
 |      
 |      The LCS does not necessarily feature in the shortest path connecting
 |      the two senses, as it is by definition the common ancestor deepest in
 |      the taxonomy, not closest to the two senses. Typically, however, it
 |      will so feature. Where multiple candidates for the LCS exist, that
 |      whose shortest path to the root node is the longest will be selected.
 |      Where the LCS has multiple paths to the root, the longer path is used
 |      for the purposes of the calculation.
 |      
 |      :type  other: Synset
 |      :param other: The ``Synset`` that this ``Synset`` is being compared to.
 |      :type simulate_root: bool
 |      :param simulate_root: The various verb taxonomies do not
 |          share a single root which disallows this metric from working for
 |          synsets that are not connected. This flag (True by default)
 |          creates a fake root that connects all the taxonomies. Set it
 |          to false to disable this behavior. For the noun taxonomy,
 |          there is usually a default root except for WordNet version 1.6.
 |          If you are using wordnet 1.6, a fake root will be added for nouns
 |          as well.
 |      :return: A float score denoting the similarity of the two ``Synset``
 |          objects, normally greater than zero. If no connecting path between
 |          the two senses can be found, None is returned.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _WordNetObject:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __ge__(self, other, NotImplemented=NotImplemented)
 |      Return a >= b.  Computed by @total_ordering from (not a < b).
 |  
 |  __gt__(self, other, NotImplemented=NotImplemented)
 |      Return a > b.  Computed by @total_ordering from (not a < b) and (a != b).
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __le__(self, other, NotImplemented=NotImplemented)
 |      Return a <= b.  Computed by @total_ordering from (a < b) or (a == b).
 |  
 |  __lt__(self, other)
 |      Return self<value.
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  also_sees(self)
 |  
 |  attributes(self)
 |  
 |  causes(self)
 |  
 |  entailments(self)
 |  
 |  hypernyms(self)
 |  
 |  hyponyms(self)
 |  
 |  in_region_domains(self)
 |  
 |  in_topic_domains(self)
 |  
 |  in_usage_domains(self)
 |  
 |  instance_hypernyms(self)
 |  
 |  instance_hyponyms(self)
 |  
 |  member_holonyms(self)
 |  
 |  member_meronyms(self)
 |  
 |  part_holonyms(self)
 |  
 |  part_meronyms(self)
 |  
 |  region_domains(self)
 |  
 |  similar_tos(self)
 |  
 |  substance_holonyms(self)
 |  
 |  substance_meronyms(self)
 |  
 |  topic_domains(self)
 |  
 |  usage_domains(self)
 |  
 |  verb_groups(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _WordNetObject:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)

